<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>efective-go on duchm</title>
    <link>https://duchoangmanh.github.io/tags/efective-go/</link>
    <description>Recent content in efective-go on duchm</description>
    <image>
      <url>https://duchoangmanh.github.io/papermod-cover.png</url>
      <link>https://duchoangmanh.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 13 Jul 2022 00:01:23 +0700</lastBuildDate><atom:link href="https://duchoangmanh.github.io/tags/efective-go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go: Giới thiệu về Reflection qua ví dụ</title>
      <link>https://duchoangmanh.github.io/posts/technical/go-reflection-qua-vi-du/</link>
      <pubDate>Wed, 13 Jul 2022 00:01:23 +0700</pubDate>
      
      <guid>https://duchoangmanh.github.io/posts/technical/go-reflection-qua-vi-du/</guid>
      <description>Reflection trong Go Reflection trong go giúp cho ta có thể theo dõi code tại thời điểm runtime, cho phép tiếp cận mã nguồn chương trình dưới dạng data có thể xử lý thay vì các lệnh có thể thực thi (một nhánh trong metaprogramming).
Reflection trong go có thể được thực hiện thông qua reflect package. Một số khả năng của reflect:
 Kiểm tra thông tin của một struct (số lượng method, số lượng field, đọc struct tag&amp;hellip;) mà không cần biết trước về struct đó.</description>
    </item>
    
    <item>
      <title>Go Tips and Optimization Notes</title>
      <link>https://duchoangmanh.github.io/posts/technical/go-tips-and-optimization-notes/</link>
      <pubDate>Tue, 14 Jun 2022 13:31:06 +0700</pubDate>
      
      <guid>https://duchoangmanh.github.io/posts/technical/go-tips-and-optimization-notes/</guid>
      <description>Some Go tips (maybe some dark side too) and notes for writing better code.
1. Efficiently converse between string and byte slice Gain some performance with the price of maintainability. Using the unsafe package is not advised but we can use it to efficiently converse between a string and byte slice. Use at your own risk.
byte slice to string func String(b []byte) (s string) { if len(b) == 0 { return &amp;#34;&amp;#34; } return *(*string)(unsafe.</description>
    </item>
    
    <item>
      <title>Design pattern thân thiện trong go</title>
      <link>https://duchoangmanh.github.io/posts/technical/design-pattern-than-thien-trong-go/</link>
      <pubDate>Sun, 26 Dec 2021 22:14:29 +0700</pubDate>
      
      <guid>https://duchoangmanh.github.io/posts/technical/design-pattern-than-thien-trong-go/</guid>
      <description>Tại sao lại có bài viết này?: Design pattern: Những giải pháp có thể tái sử dụng cho các vấn đề thường gặp tại một ngữ cảnh nhất định trong quá trinh thiết kế phần mềm.
Bài viết này nói về một số Design pattern &amp;ldquo;thân thiện&amp;rdquo; hơn trong go, được mình tổng hợp dựa trên buổi talk của Ryan Djurovich (https://www.youtube.com/watch?v=HHqv3_rUr88) và một số nguồn tài liệu khác mà mình đọc được.</description>
    </item>
    
  </channel>
</rss>
