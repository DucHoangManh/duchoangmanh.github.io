[{"content":"Reflection trong Go Reflection trong go giúp cho ta có thể theo dõi code tại thời điểm runtime, cho phép tiếp cận mã nguồn chương trình dưới dạng data có thể xử lý thay vì các lệnh có thể thực thi (một nhánh trong metaprogramming).\nReflection trong go có thể được thực hiện thông qua reflect package. Một số khả năng của reflect:\n Kiểm tra thông tin của một struct (số lượng method, số lượng field, đọc struct tag\u0026hellip;) mà không cần biết trước về struct đó. Kiểm tra và cập nhật một type (slice, channel, struct, interface, pointer\u0026hellip;) mà không cần biết trước về type đó.  Đổi lại những khả năng mạnh mẽ của recflect, performance và tính maintainable của code sẽ giảm, cần cân nhắc kĩ trước khi quyết định đưa vào ứng dụng.\n Clear is better than clever. Reflection is never clear - Go proverb (Rob Pike)\n Ứng dụng của reflect:\n Các function, method với đầu vào không rõ trước. Viết công cụ phân tích mã nguồn. Thực thi code linh hoạt (VD liệt kê các method của một struct và gọi method theo tên).  Một số package, library sử dụng reflection: fmt, encoding/json, gorm, sqlx\u0026hellip;\nCác khái niệm quan trọng Có hai type quan trọng trong reflect package: reflect.Type và reflect.Value, mọi biến trong một chương trình có thể được thể hiện bởi một cặp Value và Type. reflect.Type và reflect.Value như tên gọi chứa các thông tin tương ứng về type và value của biến đang xem xét, đi kèm các utilitiy funtion và method để thao tác với data. Các giá trị này của một biến x bất kì có thể được lấy bằng reflect.ValueOf(x) và reflect.TypeOf(x):\ntype Person struct { Name string Age int } p := Person{ Name: \u0026#34;Duc\u0026#34;, Age: 10, } pp := \u0026amp;p o := []int{1, 2, 3} s := \u0026#34;reflect in go\u0026#34; fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.ValueOf(p), reflect.TypeOf(p)) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.ValueOf(pp), reflect.TypeOf(pp)) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.ValueOf(o), reflect.TypeOf(o)) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.ValueOf(s), reflect.TypeOf(s)) Kết quả:\n({Duc 10}, main.Person) (\u0026amp;{Duc 10}, *main.Person) ([1 2 3], []int) (reflect in go, string) Ngoài ra ta cũng có thể đọc được thêm một số thông tin quan trọng khác như reflect.Kind - chứa thông tin cụ thể hơn về kiểu của một biến, có thể truy cập bằng Value.Kind() hoặc Type.Kind():\nfmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.TypeOf(p), reflect.ValueOf(p).Kind()) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.TypeOf(pp), reflect.ValueOf(pp).Kind()) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.TypeOf(o), reflect.ValueOf(o).Kind()) fmt.Printf(\u0026#34;(%v, %v)\\n\u0026#34;, reflect.TypeOf(s), reflect.ValueOf(s).Kind()) Kết quả:\n(main.Person, struct) (*main.Person, ptr) ([]int, slice) (string, string) Parse url query với reflection Xét bài toán cần viết một hàm nhận vào một *http.Request và một struct sau đó fill dữ liệu từ URL query vào struct đó:\ntype Person struct { Name string Age int } func ParseQuery(r *http.Request, p *Person) (err error) { q := r.URL.Query() p.Name = q.Get(\u0026#34;name\u0026#34;) p.Age, err = strconv.Atoi(q.Get(\u0026#34;age\u0026#34;)) return err } func TestParseQuery(t *testing.T) { req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/root?name=Duc\u0026amp;age=10\u0026#34;, nil) var d Person err := Parse(req, \u0026amp;d) if err != nil { t.Error(err.Error()) } fmt.Println(d) // {Duc 10} } Một ví dụ khá cơ bản và thường gặp phải không? Tuy nhiên cách làm này sẽ cần phải lặp lại code khá nhiều. Vậy thay vì biết trước struct được truyền vào là Person thì ta có thể truyền một struct bất kì với các field có tên ứng với các query có thể gặp mà vẫn đạt được kết quả tương tự hay không? Với reflect thì hoàn toàn có thể. Ý tưởng là ta có thể dùng reflect để đọc thông tin của struct bất kỳ được truyền vào, duyệt qua lần lượt các field, và kiểm tra xem trong URL có query nào tương ứng với field đang xét hay không, nếu có thì đọc giá trị của query vào field.\nBắt tay vào code Tổng quan của chương trình có thể được thể hiện như sau:\nfunc Parse(r *http.Request, dest any) (err error) { v := reflect.ValueOf(dest) q := r.URL.Query() if v.Kind() != reflect.Ptr || v.Elem().Kind() != reflect.Struct { return fmt.Errorf(\u0026#34;dest must be a pointer to a struct\u0026#34;) } v = v.Elem() t := v.Type() for i := 0; i \u0026lt; v.NumField(); i++ { fVal := v.Field(i) fType := t.Field(i) fName := strings.ToLower(fType.Name) err = parse(q.Get(fName), fVal) if err != nil { return fmt.Errorf(\u0026#34;parse %w\u0026#34;, err) } } return nil } func parse(stringVal string, destVal reflect.Value) (err error) { // xử lý cụ thể cho từng field } Lưu ý là bắt buộc đầu vào của hàm phải là một con trỏ tới struct thì reflect mới có thể thay đổi được struct đó, ta có thể kiểm tra điều kiện này với v.Kind() == reflect.Ptr và v.Elem().Kind() == reflect.Struct - Vì ta expect giá trị truyền vào là con trỏ (tương ứng reflect.Ptr nên cần gọi Elem() để lấy ra giá trị thực ở sau con trỏ đó) Sau khi đã có được Type và Value của struct đầu vào rồi, ta sẽ tiến hành duyệt qua từng field và xử lý cụ thể ở trong hàm parse\nfunc parse(stringVal string, destVal reflect.Value) (err error) { if stringVal == \u0026#34;\u0026#34; { // bỏ qua nếu như không có query tương ứng với field này \treturn nil } if !destVal.CanSet() { return fmt.Errorf(\u0026#34;field unexported or cannot set value\u0026#34;) } k := destVal.Kind() switch { case k == reflect.String: err = parseString(stringVal, destVal) case k \u0026gt;= reflect.Int \u0026amp;\u0026amp; k \u0026lt;= reflect.Int64: err = parseInt(stringVal, destVal) default: err = fmt.Errorf(\u0026#34;type not supported: %v\u0026#34;, destVal.Type()) return err } Giải thích: Trong hàm này ta sẽ kiểm tra Kind của từng field và với mỗi kind đó sẽ có hàm cụ thể để xử lý giúp cho code clear hơn. Trick nhỏ là thay vì kiểm tra với từng kiểu int, int8\u0026hellip; thì có thể viết k \u0026gt;= reflect.Int \u0026amp;\u0026amp; k \u0026lt;= reflect.Int64 do trong mã nguồn của reflect, các Kind có thể có của biến được viết dưới dạng:\nconst ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 ... ) Tương tự với uint và float.\n Lưu ý quan trọng: reflect không thể cập nhật unexported field, nên cần kiểm tra trước với CanSet() (tương ứng với CanAddr() == true và field exported). hoặc có thể kiểm tra với CanInterface()\n Viết hàm parse đối với từng Kind:\nfunc parseString(in string, dest reflect.Value) error { dest.SetString(in) return nil } func parseInt(in string, dest reflect.Value) error { intVal, err := strconv.ParseInt(in, 10, 0) if err != nil { return fmt.Errorf(\u0026#34;parseInt %w\u0026#34;, err) } dest.SetInt(intVal) return nil } Tiến hành chạy thử chương trình:\ntype Person struct { Name string Age int } func TestQueryParser(t *testing.T) { req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/root?name=Duc\u0026amp;age=10\u0026#34;, nil) var d Person err := Parse(req, \u0026amp;d) if err != nil { t.Error(err.Error()) } fmt.Println(d) // {Duc 10} } It works!\nThế còn slice thì sao? Đầu vào:\ntype Person struct { ... IDs []int } Expect với URL query có dạng ?ids=1,2,3, sau khi parse thì field IDs sẽ có giá trị []int{1,2,3}.\nThêm case đối với Kind == reflect.Slice ở hàm parse\nfunc parse(stringVal string, destVal reflect.Value) (err error) { ... case k == reflect.Slice: err = parseSlice(stringVal, destVal) ... } func parseSlice(in string, dest reflect.Value) error { parts := strings.Split(in, \u0026#34;,\u0026#34;) sliceType := dest.Type().Elem() // lấy type của phần tử strong slice \tsliceLen := len(parts) sliceVal := reflect.MakeSlice(reflect.SliceOf(sliceType), sliceLen, sliceLen) // make slice tương ứng \tfor i := 0; i \u0026lt; sliceLen; i++ { // xử lý cho từng phần tử trong slice tương tự như struct ở trên \terr := parse(parts[i], sliceVal.Index(i)) // parse từng phần tử trong slice như đã làm với int và string \tif err != nil { return fmt.Errorf(\u0026#34;parseSlice %w\u0026#34;, err) } } dest.Set(sliceVal) return nil } Để chuyển từ URL query sang slice, ta cần kiểm tra xem ở struct đích slice có kiểu dữ liệu gì và make slice tương ứng, những công việc sau đó không khác gì so với xử lý struct ở phần trên.\nChạy thử với slice:\ntype Person struct { Name string Age int IDs []int } func TestQueryParser(t *testing.T) { req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/root?ids=1,2,3\u0026#34;, nil) var d Person err := Parse(req, \u0026amp;d) if err != nil { t.Error(err.Error()) } fmt.Println(d.IDs) // [1 2 3] } Parse query linh động với struct tag Ở phiên bản hiện tại, chương trình dựa trên tên của các field trong struct để từ đó lấy ra query tương ứng. Để chương trình được flexible hơn, có thể dùng struct tag để chỉ định query tương ứng với từng field. Ví dụ\ntype Person struct { Name string `query:\u0026#34;title\u0026#34;` ... } Với sự hiện diện của tag query, field Name sẽ được parse từ query title, các field không có tag query thì behavior vẫn không thay đổi.\nBổ sung thêm phần đọc struct tag cho hàm Parse:\nfunc Parse(r *http.Request, dest any) (err error) { v := reflect.ValueOf(dest) q := r.URL.Query() if !v.IsValid() || v.Kind() != reflect.Ptr || v.Elem().Kind() != reflect.Struct { return fmt.Errorf(\u0026#34;dest must be a pointer to not nil struct\u0026#34;) } v = v.Elem() t := v.Type() for i := 0; i \u0026lt; v.NumField(); i++ { fVal := v.Field(i) fType := t.Field(i) fName := strings.ToLower(fType.Name) if queryTag := fType.Tag.Get(\u0026#34;query\u0026#34;); queryTag != \u0026#34;\u0026#34; { // kiểm tra field có tag query hay không \tfName = queryTag } err = parse(q.Get(fName), fVal) if err != nil { return fmt.Errorf(\u0026#34;parse %w\u0026#34;, err) } } return nil } Và chạy thử:\ntype Person struct { Name string `query:\u0026#34;title\u0026#34;` Age int IDs []int } func TestQueryParser(t *testing.T) { req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/root?name=Duc\u0026amp;age=10\u0026amp;title=Gopher\u0026#34;, nil) var d Person err := Parse(req, \u0026amp;d) if err != nil { t.Error(err.Error()) } fmt.Println(d) // {Gopher 10 []} } Custom parse với interface Đến phiên bản hiện tại, parser đã có thể đạp ứng được các kiều dữ liệu cơ bản trong đa số trường hợp, nhưng chưa thể hoạt động được với các kiểu dữ liệu tự định nghĩa. Ví dụ với field Name, thay vì đơn thuần là một string, có thể là struct dạng:\ntype Name struct { First string Last string } type Person struct { Name Name Age int IDs []int } Expect với URL query có dạng ?name=duc_hoang thì sau khi parse query, giá trị của Person.Name sẽ là Name{First:\u0026quot;duc\u0026quot;,Last:\u0026quot;hoang\u0026quot;}.\nMột lưu ý khi viết các hàm hay thư viện với reflect, thì nên hạn chế việc expose cho client phải thao tác với reflect để đơn giản hóa việc sử dụng hàm hay thư viện đó. Trong trường hợp này, có thể dùng một interface để biểu thị kiểu dữ liệu tự định nghĩa có thể parse được, khi Parse và field đích implement interface này thì có thể dùng hàm tương ứng để xử lý field.\ntype QueryParser interface { QueryParse(string) error } Implement QueryParser interface cho kiểu Name:\nfunc (n *Name) QueryParse(in string) error { parts := strings.Split(in, \u0026#34;_\u0026#34;) if len(parts) != 2 { return fmt.Errorf(\u0026#34;invalid input\u0026#34;) } n.First = parts[0] n.Last = parts[1] return nil } Lưu ý là cần implement đối với pointer receiver để method có thể thay đổi giá trị của receiver.\nTiến hành handle trong function parse:\nfunc parse(stringVal string, destVal reflect.Value) (err error) { ... default: err = parseDefault(stringVal, destVal) // chuyển Kind mặc định ra handle riêng để đảm bảo code được clear và dễ maintain \t} return err } func parseDefault(in string, dest reflect.Value) error { if dest.Kind() != reflect.Ptr { dest = dest.Addr() // lấy con trỏ của dest nếu dest đang không phải con trỏ \t} else if dest.IsNil() { dest.Set(reflect.New(dest.Type().Elem())) // khởi taọ nếu dest là con trỏ nil \t} if queryParser, ok := dest.Interface().(QueryParser); ok { return queryParser.QueryParse(in) // parser giá trị từ query vào dest \t} return fmt.Errorf(\u0026#34;type not supported: %s\u0026#34;, dest.Type().Kind()) } Trong hàm parseDefault, giá trị đích sẽ luôn được chuyển sang kiểu con trỏ trước khi xác định xem nó có implement QueryParser hay không.\nTrong trường hợp giá trị đích đã là con trỏ rồi, cần kiểm tra xem có phải nil hay không, nếu là nil thì cần phải khởi tạo trước khi gọi method.\nVà chạy thử:\ntype Name struct { First string Last string } func (n *Name) QueryParse(in string) error { parts := strings.Split(in, \u0026#34;_\u0026#34;) if len(parts) != 2 { return fmt.Errorf(\u0026#34;invalid input\u0026#34;) } n.First = parts[0] n.Last = parts[1] return nil } type Person struct { Name Name Age int IDs []int } func TestQueryParser(t *testing.T) { req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;/root?name=duc_hoang\u0026#34;, nil) var d Person err := Parse(req, \u0026amp;d) if err != nil { t.Error(err.Error()) } fmt.Printf(\u0026#34;(%s, %s)\u0026#34;, d.Name.First, d.Name.Last) // (duc, hoang) } Source code trong bài: https://github.com/DucHoangManh/queryparser\n","permalink":"https://duchoangmanh.github.io/posts/technical/go-reflection-qua-vi-du/","summary":"Reflection trong Go Reflection trong go giúp cho ta có thể theo dõi code tại thời điểm runtime, cho phép tiếp cận mã nguồn chương trình dưới dạng data có thể xử lý thay vì các lệnh có thể thực thi (một nhánh trong metaprogramming).\nReflection trong go có thể được thực hiện thông qua reflect package. Một số khả năng của reflect:\n Kiểm tra thông tin của một struct (số lượng method, số lượng field, đọc struct tag\u0026hellip;) mà không cần biết trước về struct đó.","title":"Go: Giới thiệu về Reflection qua ví dụ"},{"content":"This post contains my notes while implement caneweb - a gin-like minimal web framework/router after reading the first section of 7 days golang by geektutu (https://github.com/geektutu/7days-golang).\nHow standard net/http package handle request? First, let\u0026rsquo;s look at a sample written with net/http package:\nfunc main() { http.HandleFunc(\u0026#34;/\u0026#34;, handler) http.HandleFunc(\u0026#34;/post\u0026#34;, getAllPost) log.Fatal(http.ListenAndServe(\u0026#34;localhost:8000\u0026#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026#34;URL.Path = %q\\n\u0026#34;, r.URL.Path) } This piece of code binds two endpoints with the corresponding handler function, and starts a web server at port 8000, terminates the server if some errors are returned.\nAll http handlers must implement the handler interface, and we can use multiple handlers to handle a single request by passing the parameters around:\ntype Handler interface { ServeHTTP(ResponseWriter, *Request) } The standard library package does provide basic functions to create a web server including monitor port, static routing, request parsing\u0026hellip; Some other functions need to be implemented when necessary:\n Dynamic routing: routing with rules like post/:id, post/*,\u0026hellip; or using regular expression. Middleware: By passing around the request, and response between multiple functions to change the result. Group requests: Group endpoints into a cluster that share some commons. Validate requests. \u0026hellip;  Create the static-routing version of the framework First, we need to design a struct that represents the state of the current request data and have methods to easily work with requests.\nWhy encapsulate response and request into a single struct?  Reduce the complexity of the handler, a user no longer need to care about which data resides in request, or responseWriter Easier to create a response and less error-prone, reduce repetitive  For example, in order to write the response for a request, instead of\nobj = map[string]interface{}{ \u0026#34;title\u0026#34;: \u0026#34;my first blog post\u0026#34;, \u0026#34;read_time\u0026#34;: \u0026#34;5\u0026#34;, } w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) w.WriteHeader(http.StatusOK) encoder := json.NewEncoder(w) if err := encoder.Encode(obj); err != nil { http.Error(w, err.Error(), 500) } We can achive the same result in a simpler and clearer way:\nc.JSON(http.StatusOK, cane.Map{ \u0026#34;title\u0026#34;: \u0026#34;my first blog post\u0026#34;, \u0026#34;read_time\u0026#34;: 5, }) ctx.go\npackage cane import \u0026#34;net/http\u0026#34; type Ctx struct { // origin objects  Writer http.ResponseWriter Req *http.Request // request data  Path string Method string // response data  StatusCode int } // newCtx create new Ctx with original data func newCtx(w http.ResponseWriter, r *http.Request) *Ctx { return \u0026amp;Ctx{ Writer: w, Req: r, Path: r.URL.Path, Method: r.Method, } } Add some functions to work with request and reponse morre efficiently:\n// responseWriter func (c *Ctx) SetHeader(key, value string) { c.Writer.Header().Set(key, value) } func (c *Ctx) Status(code int) { c.StatusCode = code c.Writer.WriteHeader(code) } func (c *Ctx) String(code int, formatString string, values ...interface{}) { c.SetHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34;) c.Status(code) _, err := fmt.Fprintf(c.Writer, formatString, values...) if err != nil { http.Error(c.Writer, err.Error(), http.StatusInternalServerError) } } func (c *Ctx) JSON(code int, data interface{}) { c.SetHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) c.Status(code) encoder := json.NewEncoder(c.Writer) err := encoder.Encode(data) if err != nil { http.Error(c.Writer, err.Error(), http.StatusInternalServerError) } } func (c *Ctx) HTML(code int, html string) { c.SetHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/html\u0026#34;) c.Status(code) _, err := c.Writer.Write([]byte(html)) if err != nil { http.Error(c.Writer, err.Error(), http.StatusInternalServerError) } } // request func (c *Ctx) FormValue(key string) string { return c.Req.FormValue(key) } func (c *Ctx) Query(key string) string { return c.Req.URL.Query().Get(key) } Our handler interface should look like this:\ntype Handler interface { Serve(c *Ctx) } Instead of creating a struct for each handler, we can use an adapter to use a function for a simple task, like in the standard net/http package:\ntype HandleFunc func(c *Ctx) func (f HandleFunc) Serve(c *Ctx) { f(c) } The static-routing router Now, we need an object to keep all our static routing configurations and decide which handler to use with each URL and method a.k.a router In this first version of the web framework, I simply use a map to represent the router with static routing:\nrouter.go\ntype router struct { handlers map[string]Handler } func newRouter() *router { return \u0026amp;router{ handlers: make(map[string]Handler), } } // create route from method and path func getRoute(method, path string) (route string) { var builder strings.Builder fmt.Fprintf(\u0026amp;builder, \u0026#34;%s%s%s\u0026#34;, method, \u0026#34;-\u0026#34;, path) route = builder.String() return } // add a new route to the router func (r *router) addRoute(method, path string, handler Handler) { log.Printf(\u0026#34;add route %s %s\u0026#34;, method, path) route := getRoute(method, path) r.handlers[route] = handler } //route request to appropriate handler, error code if no handler found func (r *router) handle(c *Ctx) { route := getRoute(c.Method, c.Path) if handler, ok := r.handlers[route]; ok { handler.Serve(c) } else { c.Writer.WriteHeader(http.StatusNotFound) c.String(http.StatusNotFound, \u0026#34;No route found\u0026#34;) } } Create the interface of caneweb Lastly, we need a layer for the user to work with the web framework, by hiding the internal implementation of the router and such.\ntype Engine struct { router *router } // constructor of cane web framework func New() *Engine { return \u0026amp;Engine{ router: newRouter(), } } func (e *Engine) addRoute(method, pattern string, handler Handler) { e.router.addRoute(method, pattern, handler) } // define some simple operations func (e *Engine) GET(pattern string, handler Handler) { e.addRoute(http.MethodGet, pattern, handler) } func (e *Engine) POST(pattern string, handler Handler) { e.addRoute(http.MethodPost, pattern, handler) } // implement the standard package Handler interface // and transform incoming request to our handler func (e *Engine) ServeHTTP(w http.ResponseWriter, r *http.Request) { ctx := newCtx(w, r) e.router.handle(ctx) } func (e *Engine) Run(addr string) error { return http.ListenAndServe(addr, e) } Create a simple server with the framework main.go\npackage main import ( \u0026#34;caneweb/cane\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { server := cane.New() server.GET(\u0026#34;/hello\u0026#34;, cane.HandleFunc(hello)) server.POST(\u0026#34;/post\u0026#34;, cane.HandleFunc(createPost)) log.Fatal(server.Run(\u0026#34;:5445\u0026#34;)) } func hello(c *cane.Ctx) { c.String(http.StatusOK, \u0026#34;hello %s\u0026#34;, c.Query(\u0026#34;name\u0026#34;)) } func createPost(c *cane.Ctx) { title := c.FormValue(\u0026#34;title\u0026#34;) desc := c.FormValue(\u0026#34;desc\u0026#34;) c.JSON(http.StatusOK, cane.Map{ \u0026#34;post_title\u0026#34;: title, \u0026#34;description\u0026#34;: desc, }) } Send requests to the web server with curl.\ncurl \u0026#34;127.0.0.1:5445/hello?name=duchm\u0026#34; hello duchm curl \u0026#34;http://localhost:5445/post\u0026#34; -X POST -d \u0026#39;title=\u0026#34;first post\u0026#34;\u0026amp;desc=\u0026#34;rainny day\u0026#34;\u0026#39; {\u0026#34;description\u0026#34;:\u0026#34;\\\u0026#34;rainny day\\\u0026#34;\u0026#34;,\u0026#34;post_title\u0026#34;:\u0026#34;\\\u0026#34;first post\\\u0026#34;\u0026#34;} curl \u0026#34;127.0.0.1:5445/any\u0026#34; No route found That\u0026rsquo;s it, after this, we have implemented the prototype version of caneweb framework in go. Currently, the framework does nothing more than the standard net/http package but worry not, some other nice features will be added in the next versions.\nSee the source code at https://github.com/DucHoangManh/caneweb\n","permalink":"https://duchoangmanh.github.io/posts/technical/create-a-web-framework-in-go/","summary":"This post contains my notes while implement caneweb - a gin-like minimal web framework/router after reading the first section of 7 days golang by geektutu (https://github.com/geektutu/7days-golang).\nHow standard net/http package handle request? First, let\u0026rsquo;s look at a sample written with net/http package:\nfunc main() { http.HandleFunc(\u0026#34;/\u0026#34;, handler) http.HandleFunc(\u0026#34;/post\u0026#34;, getAllPost) log.Fatal(http.ListenAndServe(\u0026#34;localhost:8000\u0026#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026#34;URL.Path = %q\\n\u0026#34;, r.URL.Path) } This piece of code binds two endpoints with the corresponding handler function, and starts a web server at port 8000, terminates the server if some errors are returned.","title":"Create a web framework in Go part 1: static routing prototype"},{"content":"Tại sao lại có bài viết này?: Design pattern: Những giải pháp có thể tái sử dụng cho các vấn đề thường gặp tại một ngữ cảnh nhất định trong quá trinh thiết kế phần mềm.\nBài viết này nói về một số Design pattern \u0026ldquo;thân thiện\u0026rdquo; hơn trong go, được mình tổng hợp dựa trên buổi talk của Ryan Djurovich (https://www.youtube.com/watch?v=HHqv3_rUr88) và một số nguồn tài liệu khác mà mình đọc được.\nFactory pattern Khỏi phải nói về độ phổ biến của nó rồi, rất hữu ích khi cần phải khởi tạo một đối tượng có nhiều triển khai (concrete types), phía client chỉ cần quan tâm đến các method, Factory sẽ lo việc lựa chọn triển khai nào sẽ được dùng để xử lý dữ liệu.\n// use Stringer as the interface  type ErrPrint struct{} func (p *ErrPrint) String() string { return \u0026#34;some error happens\u0026#34; } type InfoPrint struct{} func (p *InfoPrint) String() string { return \u0026#34;nothing dramatically happens\u0026#34; } func NewPrinter(kind string) (result fmt.Stringer, err error) { switch kind { case \u0026#34;error\u0026#34;: result = \u0026amp;ErrPrint{} case \u0026#34;info\u0026#34;: result = \u0026amp;InfoPrint{} default: err = errors.New(\u0026#34;invalid kind\u0026#34;) } return } Decorator (Functional option) Để nói về pattern này, đầu tiên hãy xem ví dụ bên dưới:\nfunc runServer() { http.HandleFunc(\u0026#34;/\u0026#34;, helloEndpoint) log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil)) } func helloEndpoint(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026#34;Hello world\u0026#34;) } Đoạn code trên tạo ra một web server đơn giản với net/http package với một endpoint duy nhất. Bài toán được đặt ra là bây giờ cần log lại thời gian cần để hoàn tất xử lý request. Để gia tăng tính tái sử dụng, tránh phải sửa lại handler, cũng như dễ dàng bảo trì về sau, ta có thể viết như sau:\nfunc runServer() { http.HandleFunc(\u0026#34;/\u0026#34;, durationLogger(helloEndpoint)) log.Fatal(http.ListenAndServe(\u0026#34;:8080\u0026#34;, nil)) } func helloEndpoint(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026#34;Hello world\u0026#34;) } func durationLogger(f http.HandlerFunc) http.HandlerFunc { return func(writer http.ResponseWriter, request *http.Request) { startTime := time.Now() f(writer, request) log.Printf(\u0026#34;complete handle request after %s ms\u0026#34;, time.Since(startTime).Milliseconds()) } } Như vậy, chúng ta có thể dễ dàng thêm tính năng log thời gian này vào những handler cần thiết, việc thay đổi nội dung log cũng trở nên dễ dàng hơn. Đây chỉ là một ví dụ đơn giản về middleware, trong thực tế việc triển khai có thể phức tạp hơn để phù hợp với các nhù cầu khác nhau.\nIterator Tại sao lại cần pattern này thay vì duyệt (array, slice, map, channel\u0026hellip;) trong go?\n Có thể kết hợp với decorator Khi viết một module nào đó mà muốn che giấu triển khai bên dưới, chỉ cho phép phía sử dụng duyệt tuần tự các phần tử. Ví dụ io.Reader, sql/database.Row  type Iterator struct { tasks []string position int } // Next will return the next task in the slice // if there\u0026#39;s more data to iterate, more will be true func (t *Iterator) Next() (pos int, val string, more bool) { t.position++ if t.position \u0026gt; len(t.tasks) { return t.position, \u0026#34;\u0026#34;, false } return t.position, t.tasks[t.position-1], true } Trên đây là một ví dụ đơn giản về triển khai iterator trong go\nfor _, val, more := i.Next(); more; _, val, more = i.Next() { fmt.Println(val) } Dependency Injection DI trong go có thể được triển khai theo nhiều cách, có cả những thư viện chuyên dùng để DI trong go (google/wire, uber-go/fx), trong bài viết này sẽ chỉ nói vể cách triển khai đơn giản nhất\n┌────────────────────┬──────────┬────────────────────────────────┬────────┐ │ Client package │ Client ├─────► \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; │ │ │ └──────────┘ │ Client Service Interface │ │ │ └─────▲────────────────────┘ │ │ │ │ ├───────────────────────────────────────────┼─────────────────────────────┤ ├───────────────────────────┼───────────────|─────┼─┼──────────────────┼──┤ │ Service package │ Concrete Service 1 │ │Concrete Service 2│ │ │ └─────────────────────┘ └──────────────────┘ │ │ │ │ │ └─────────────────────────────────────────────────────────────────────────┘ Đây là một đoạn code ví dụ co dependency injection sử dụng constructor\nfunc main() { s := NewMyService(os.Stderr) s.WriteHello(\u0026#34;world\u0026#34;) } type MyService struct { writer io.Writer } func NewMyService(writer io.Writer) MyService { return MyService{ writer: writer, } } func (s *MyService) WriteHello(m string) { fmt.Fprintf(s.writer, \u0026#34;Hello %s\\n\u0026#34;, m) } Thêm method để có thể sử dụng setter injection:\nfunc (s *MyService) SetWriter(w io.Writer) { s.writer = w } So sánh hai cách:\n constructor: Đảm bảo dependency được sử dụng luôn valid setter: Có thể thay thế concrete service trong quá trình chạy chương trình(runtime)  Repository Một pattern trong thiết kế phần mếm hướng tới việc tiến hóa lâu dài của ứng dụng, các module phụ thuộc có thể được thay đổi trong tương lai. Ví dụ dưới đề thể hiện việc triển khai một ứng dụng mà lớp storage có thể được thay đổi: package post - khai báo model\ntype Post struct { ID int64 Title string } package domain - khai báo các interface client sử dụng để thao tác với storage\n// Repository must be implemented by all implementations of Post storage type Repository interface { FindAll() ([]post.Post, error) Store(post post.Post) (post.Post, error) DeleteById(postId int64) error } package memstorage - một triển khai của storage\n//in-memory implementation type PostStorage struct { posts map[int64]string highestID int64 } func (p *PostStorage) FindAll() ([]post.Post, error) { result := make([]post.Post, 0) for id, title := range p.posts { result = append(result, post.Post{ ID: id, Title: title, }) } return result, nil } func (p *PostStorage) Store(post post.Post) (post.Post, error) { if p.posts == nil { p.posts = make(map[int64]string) } if post.ID \u0026lt;= 0 { p.highestID++ post.ID = p.highestID } else { if _, exists := p.posts[post.ID]; !exists { return post, fmt.Errorf(\u0026#34;post already exist\u0026#34;) } } p.posts[post.ID] = post.Title return post, nil } func (p *PostStorage) DeleteById(postId int64) error { delete(p.posts, postId) return nil } Sử dụng repository package: package main\nfunc main() { postRepo := memstorage.PostStorage{} //may change to other implementation in the future \tnewPost, err := postRepo.Store(post.Post{ Title: \u0026#34;Eagles fly\u0026#34;, }) if err != nil { log.Println(\u0026#34;can not create post\u0026#34;, err) } else { log.Printf(\u0026#34;created post with id %d\u0026#34;, newPost.ID) } posts, err := postRepo.FindAll() if err != nil { log.Println(\u0026#34;can not fetch posts\u0026#34;, err) } else { log.Println(posts) } } Bằng cách chia nhỏ việc triển khai, domain interface và model, trong trường hợp một phần mềm cần thay thế các module trong tương lai, có thể update một cách dễ dàng.\nMã nguồn trong bài viết có thể xem tại: https://github.com/DucHoangManh/go-patterns\n","permalink":"https://duchoangmanh.github.io/posts/technical/design-pattern-than-thien-trong-go/","summary":"Tại sao lại có bài viết này?: Design pattern: Những giải pháp có thể tái sử dụng cho các vấn đề thường gặp tại một ngữ cảnh nhất định trong quá trinh thiết kế phần mềm.\nBài viết này nói về một số Design pattern \u0026ldquo;thân thiện\u0026rdquo; hơn trong go, được mình tổng hợp dựa trên buổi talk của Ryan Djurovich (https://www.youtube.com/watch?v=HHqv3_rUr88) và một số nguồn tài liệu khác mà mình đọc được.","title":"Design pattern thân thiện trong go"}]